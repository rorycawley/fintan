{:min-bb-version "1.3.186"

 :paths ["src" "test" "scripts"]

 :deps {org.clojure/clojure {:mvn/version "1.12.0"}}

 :tasks
 {:requires ([babashka.fs :as fs]
             [clojure.string :as str])

  :init (do
          (def project-root (fs/cwd))
          (def src-dirs ["src" "test"])
          (defn print-header [title]
            (println (str "\n=== " title " ==="))))

  ;; Development tasks
  repl
  {:doc "Start a Clojure REPL with nREPL server for Cursive"
   :task (shell "clj -M:repl")}

  dev-repl
  {:doc "Start development REPL with extra dev tools"
   :task (shell "clj -M:dev:repl")}

  ;; Testing tasks
  test
  {:doc "Run all tests"
   :task (do
           (print-header "Running Tests")
           (shell "clj -M:test-deps:runner"))}

  test-watch
  {:doc "Run tests in watch mode (requires entr or similar)"
   :task (do
           (print-header "Running Tests in Watch Mode")
           (println "Watching for changes in src/ and test/ directories...")
           (shell "find src test -name '*.clj' | entr -c bb test"))}

  test-coverage
  {:doc "Run tests and generate coverage report"
   :task (do
           (print-header "Running Test Coverage")
           (shell "clj -M:test-deps:runner --reporter coverage"))}

  ;; Demo and execution tasks
  demo
  {:doc "Run the decision agent demonstration"
   :task (do
           (print-header "Decision Agent Demo")
           (shell "clj -M:demo"))}

  analyze
  {:doc "Run decision analysis example"
   :task (do
           (print-header "Decision Analysis Example")
           (shell "clj -e \"(require '[decision-agent.core :as agent]) (clojure.pprint/pprint (agent/analyze-decision [:eggs :rice :oil] 4 20))\""))}

  recommend
  {:doc "Quick meal recommendation (usage: bb recommend eggs,rice,oil 4 20)"
   :task (let [ingredients (-> (first *command-line-args*) (str/split #",") vec)
               hunger (parse-long (second *command-line-args*))
               time (parse-long (nth *command-line-args* 2))]
           (when (or (nil? hunger) (nil? time))
             (println "Usage: bb recommend ingredients,list hunger-level available-time")
             (println "Example: bb recommend eggs,rice,oil 4 20")
             (System/exit 1))
           (shell (format "clj -e \"(require '[decision-agent.core :as agent]) (println (agent/recommend-meal %s %d %d))\""
                    (str "[" (str/join " " (map #(str ":" %) ingredients)) "]")
                    hunger time)))}

  ;; Code quality tasks
  format-check
  {:doc "Check code formatting"
   :task (do
           (print-header "Checking Code Format")
           (shell "clj -M:format"))}

  format
  {:doc "Fix code formatting"
   :task (do
           (print-header "Fixing Code Format")
           (shell "clj -M:format-fix"))}

  lint
  {:doc "Lint code with clj-kondo"
   :task (do
           (print-header "Linting Code")
           (shell "clj -M:lint"))}

  check
  {:doc "Run all checks (lint, format, test)"
   :task (do
           (run 'lint)
           (run 'format-check)
           (run 'test)
           (print-header "All Checks Complete"))}

  ;; Project management tasks
  outdated
  {:doc "Check for outdated dependencies"
   :task (do
           (print-header "Checking for Outdated Dependencies")
           (shell "clj -M:outdated"))}

  clean
  {:doc "Clean build artifacts and target directory"
   :task (do
           (print-header "Cleaning Build Artifacts")
           (when (fs/exists? "target")
             (fs/delete-tree "target")
             (println "Deleted target/ directory"))
           (when (fs/exists? ".cpcache")
             (fs/delete-tree ".cpcache")
             (println "Deleted .cpcache/ directory"))
           (println "Clean complete"))}

  build
  {:doc "Build uberjar"
   :task (do
           (print-header "Building Uberjar")
           (run 'clean)
           (shell "clj -M:uberjar"))}

  ;; Development workflow tasks
  dev
  {:doc "Start development workflow (format, test, demo)"
   :task (do
           (run 'format)
           (run 'test)
           (run 'demo))}

  ci
  {:doc "Run CI pipeline (lint, format-check, test)"
   :task (do
           (print-header "Running CI Pipeline")
           (run 'lint)
           (run 'format-check)
           (run 'test)
           (print-header "CI Pipeline Complete"))}

  ;; Help and information
  help
  {:doc "Show available tasks"
   :task (do
           (print-header "Available Babashka Tasks")
           (println "Development:")
           (println "  repl          - Start Clojure REPL with nREPL")
           (println "  dev-repl      - Start development REPL with tools")
           (println "  demo          - Run decision agent demonstration")
           (println "  analyze       - Run decision analysis example")
           (println "  recommend     - Quick meal recommendation")
           (println "\nTesting:")
           (println "  test          - Run all tests")
           (println "  test-watch    - Run tests in watch mode")
           (println "  test-coverage - Run tests with coverage")
           (println "\nCode Quality:")
           (println "  lint          - Lint code with clj-kondo")
           (println "  format        - Fix code formatting")
           (println "  format-check  - Check code formatting")
           (println "  check         - Run all checks")
           (println "\nProject Management:")
           (println "  clean         - Clean build artifacts")
           (println "  build         - Build uberjar")
           (println "  outdated      - Check for outdated dependencies")
           (println "\nWorkflows:")
           (println "  dev           - Development workflow")
           (println "  ci            - CI pipeline")
           (println "\nExamples:")
           (println "  bb demo")
           (println "  bb recommend eggs,rice,oil 4 20")
           (println "  bb test-watch"))}

  ;; Default task
  :default help}}
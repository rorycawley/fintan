{:paths ["src"]

 :deps {;; Core dependencies - minimal by design
        org.clojure/clojure {:mvn/version "1.11.1"}
        org.clojure/data.json {:mvn/version "2.4.0"}
        clj-http/clj-http {:mvn/version "3.12.3"}

        ;; Optional for enhanced JSON handling
        cheshire/cheshire {:mvn/version "5.13.0"}

        ;; Specs for validation
        org.clojure/spec.alpha {:mvn/version "0.3.218"}}

 :aliases
 {;; Development
  :dev {:extra-paths ["dev" "examples"]
        :extra-deps {org.clojure/tools.namespace {:mvn/version "1.4.4"}
                     org.clojure/tools.logging {:mvn/version "1.2.4"}}}

  ;; Testing
  :test {:extra-paths ["test"]
         :extra-deps {io.github.cognitect-labs/test-runner
                      {:git/tag "v0.5.1" :git/sha "dfb30dd"}
                      org.clojure/test.check {:mvn/version "1.1.1"}
                      lambdaisland/kaocha {:mvn/version "1.87.1366"}}
         :main-opts ["-m" "cognitect.test-runner"
                     "-d" "test"]}

  ;; REPL with nREPL and CIDER
  :repl {:extra-deps {nrepl/nrepl {:mvn/version "1.0.0"}
                      cider/cider-nrepl {:mvn/version "0.42.1"}
                      refactor-nrepl/refactor-nrepl {:mvn/version "3.9.0"}}
         :main-opts ["-m" "nrepl.cmdline"
                     "--middleware" "[cider.nrepl/cider-middleware]"
                     "--interactive"
                     "--color"]}

  ;; Optional integrations - users add these as needed
  :component {:extra-deps {com.stuartsierra/component {:mvn/version "1.1.0"}}}

  :integrant {:extra-deps {integrant/integrant {:mvn/version "0.8.1"}
                           integrant/repl {:mvn/version "0.3.3"}}}

  :mount {:extra-deps {mount/mount {:mvn/version "0.1.17"}}}

  ;; Examples - includes all integration dependencies
  :examples {:extra-paths ["examples"]
             :extra-deps {com.stuartsierra/component {:mvn/version "1.1.0"}
                          integrant/integrant {:mvn/version "0.8.1"}
                          mount/mount {:mvn/version "0.1.17"}}}

  ;; Build
  :build {:deps {io.github.clojure/tools.build {:git/tag "v0.9.6"
                                                :git/sha "8e78bcc"}}
          :ns-default build}

  ;; Deploy to Clojars
  :deploy {:extra-deps {slipset/deps-deploy {:mvn/version "0.2.0"}}
           :exec-fn deps-deploy.deps-deploy/deploy
           :exec-args {:installer :remote
                       :sign-releases? true
                       :artifact "target/standard-agent.jar"}}

  ;; Documentation generation
  :docs {:extra-deps {codox/codox {:mvn/version "0.10.8"}}
         :exec-fn codox.main/generate-docs
         :exec-args {:output-path "docs"
                     :source-paths ["src"]
                     :doc-files ["README.md" "CHANGELOG.md"]
                     :namespaces :all}}

  ;; Benchmarking
  :bench {:extra-paths ["bench"]
          :extra-deps {criterium/criterium {:mvn/version "0.4.6"}}}

  ;; Check for outdated dependencies
  :outdated {:extra-deps {com.github.liquidz/antq {:mvn/version "2.5.1109"}}
             :main-opts ["-m" "antq.core"]}

  ;; Linting
  :lint {:extra-deps {clj-kondo/clj-kondo {:mvn/version "2023.12.15"}}
         :main-opts ["-m" "clj-kondo.main" "--lint" "src"]}

  ;; Formatting
  :format {:extra-deps {cljfmt/cljfmt {:mvn/version "0.9.2"}}
           :main-opts ["-m" "cljfmt.main" "fix"]}

  :format-check {:extra-deps {cljfmt/cljfmt {:mvn/version "0.9.2"}}
                 :main-opts ["-m" "cljfmt.main" "check"]}

  ;; Run examples
  :run-example {:extra-paths ["examples"]
                :main-opts ["-m" "examples.meal-agent"]}

  ;; Run with specific provider examples
  :openai-example {:extra-paths ["examples"]
                   :jvm-opts ["-Dopenai.api.key=${OPENAI_API_KEY}"]
                   :main-opts ["-m" "examples.meal-agent" "functional"]}

  :claude-example {:extra-paths ["examples"]
                   :jvm-opts ["-Dclaude.api.key=${CLAUDE_API_KEY}"]
                   :main-opts ["-m" "examples.meal-agent" "registry"]}

  :gemini-example {:extra-paths ["examples"]
                   :jvm-opts ["-Dgemini.api.key=${GEMINI_API_KEY}"]
                   :main-opts ["-m" "examples.meal-agent" "hot-swap"]}}}